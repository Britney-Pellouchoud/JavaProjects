
_board = new Sq[][];
        int column = -1;
        for (int[] col: _solution) {
            column += 1;
            int row = -1;
            for (int x : col) {
                row += 1;
                if (_solution[column][row] == 1 || _solution[column][row] == last) {
                    _board[column][row] = new Sq(column, row, _solution[column][row], true, 0, 1);
                }
                else {
                    _board[column][row] = new Sq(column, row, 0, false, 0, 1);
                }

            }
        }
        for (Sq[] col: _board) {
            for (Sq sq : col) {
                _allSquares.add(sq);
            }
        }













_allSquares = new ArrayList<>();
        _board = new Sq[][]{};
        for (col in solution) {
            for (entry in col) {
                _allSquares.add(entry);
            }
        }



  _allSquares = new ArrayList<>();
        _board = new Sq[][]{};
        int column_num = solution.width; // determine how many rows there are
        int column_counter = -1;
        while (column_counter < column_num - 1) { // iterate through columns
            column_counter += 1;
            int row_num = solution.height(); //determine how many rows there are
            int row_counter = -1; // must do this inside first while, needs to reset for each column
            while (row_counter < column_num - 1) { // iterate through rows
                row_counter += 1;
                if (solution[column_num][row_num] == 1 || solution[column_num][row_num] == solution.size()) {
                    _board[column_num][row_num] == solution[column_num][row_num];
                    _allSqaures.add(new Sq(column_num, row_num, _solNumToPlace([column_num, row_num]), true, 0, 0));
                } // if it's the first or last tile (1 or the end), the position is fixed
                else {
                    //_board[column_num][row_num] ==
                    _allSqaures.add(new Sq(column_num, row_num, solution[column_num][row_num], false, 0, -1));
                }
                // all other tiles will not have fixed positions (so you can play the game)
            }
        }



_board = new Sq[][] {
            { new Sq(0, 0, 0, false, 2, -1), new Sq(0, 1, 0, false, 2, -1),
              new Sq(0, 2, 0, false, 4, -1), new Sq(0, 3, 1, true, 2, 0) },
            { new Sq(1, 0, 0, false, 2, -1), new Sq(1, 1, 0, false, 2, -1),
              new Sq(1, 2, 0, false, 6, -1), new Sq(1, 3, 0, false, 2, -1) },
            { new Sq(2, 0, 0, false, 6, -1), new Sq(2, 1, 0, false, 2, -1),
              new Sq(2, 2, 0, false, 6, -1), new Sq(2, 3, 0, false, 2, -1) },
            { new Sq(3, 0, 16, true, 0, 0), new Sq(3, 1, 0, false, 5, -1),
              new Sq(3, 2, 0, false, 6, -1), new Sq(3, 3, 0, false, 4, -1) }
        };
        for (Sq[] col: _board) {
            for (Sq sq : col) {
                _allSquares.add(sq);
            }
        }


_board = new Sq[][]{};
        for (col in solution) {
            for (entry in col) {

            }
        }
    };
        _allSquares = new ArrayList<>();
        _solnNumToPlace = new Array();
        for (Sq[] col: _board) {
            for (Sq sq : col) {
            _allSquares.add(sq);
        }
    }




                int column_num = solution.width; // determine how many rows there are
                int column_counter = -1;
                while (column_counter < column_num - 1) { // iterate through columns
                    column_counter += 1;
                    int row_num = solution.height(); //determine how many rows there are
                    int row_counter = -1; // must do this inside first while, needs to reset for each column
                    while (row_counter < column_num - 1) { // iterate through rows
                        row_counter += 1;
                         if (solution[column_num][row_num] == 1 || solution[column_num][row_num] == solution.size()) {
                             _allSqaures.add(new Sq(column_num, row_num, _solNumToPlace([column_num, row_num]), true, 0, 0));
                    } // if it's the first or last tile (1 or the end), the position is fixed
                         else {
                             _allSqaures.add(new Sq(column_num, row_num, solution[column_num][row_num], false, 0, -1));
                         }
                         // all other tiles will not have fixed positions (so you can play the game)
                }
                }